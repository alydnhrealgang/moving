// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/alydnhrealgang/moving/cli/api/models"
)

// MoveItemsReader is a Reader for the MoveItems structure.
type MoveItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMoveItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveItemsOK creates a MoveItemsOK with default headers values
func NewMoveItemsOK() *MoveItemsOK {
	return &MoveItemsOK{}
}

/*
MoveItemsOK describes a response with status code 200, with default header values.

OK
*/
type MoveItemsOK struct {
	Payload *MoveItemsOKBody
}

// IsSuccess returns true when this move items o k response has a 2xx status code
func (o *MoveItemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this move items o k response has a 3xx status code
func (o *MoveItemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this move items o k response has a 4xx status code
func (o *MoveItemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this move items o k response has a 5xx status code
func (o *MoveItemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this move items o k response a status code equal to that given
func (o *MoveItemsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the move items o k response
func (o *MoveItemsOK) Code() int {
	return 200
}

func (o *MoveItemsOK) Error() string {
	return fmt.Sprintf("[POST /items/move][%d] moveItemsOK  %+v", 200, o.Payload)
}

func (o *MoveItemsOK) String() string {
	return fmt.Sprintf("[POST /items/move][%d] moveItemsOK  %+v", 200, o.Payload)
}

func (o *MoveItemsOK) GetPayload() *MoveItemsOKBody {
	return o.Payload
}

func (o *MoveItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MoveItemsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveItemsBadRequest creates a MoveItemsBadRequest with default headers values
func NewMoveItemsBadRequest() *MoveItemsBadRequest {
	return &MoveItemsBadRequest{}
}

/*
MoveItemsBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type MoveItemsBadRequest struct {
	Payload string
}

// IsSuccess returns true when this move items bad request response has a 2xx status code
func (o *MoveItemsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this move items bad request response has a 3xx status code
func (o *MoveItemsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this move items bad request response has a 4xx status code
func (o *MoveItemsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this move items bad request response has a 5xx status code
func (o *MoveItemsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this move items bad request response a status code equal to that given
func (o *MoveItemsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the move items bad request response
func (o *MoveItemsBadRequest) Code() int {
	return 400
}

func (o *MoveItemsBadRequest) Error() string {
	return fmt.Sprintf("[POST /items/move][%d] moveItemsBadRequest  %+v", 400, o.Payload)
}

func (o *MoveItemsBadRequest) String() string {
	return fmt.Sprintf("[POST /items/move][%d] moveItemsBadRequest  %+v", 400, o.Payload)
}

func (o *MoveItemsBadRequest) GetPayload() string {
	return o.Payload
}

func (o *MoveItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
MoveItemsBody move items body
swagger:model MoveItemsBody
*/
type MoveItemsBody struct {

	// codes
	Codes []string `json:"codes"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this move items body
func (o *MoveItemsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move items body based on context it is used
func (o *MoveItemsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveItemsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveItemsBody) UnmarshalBinary(b []byte) error {
	var res MoveItemsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveItemsOKBody move items o k body
swagger:model MoveItemsOKBody
*/
type MoveItemsOKBody struct {

	// codes not found
	CodesNotFound []string `json:"codesNotFound"`

	// moved
	Moved []*models.ItemData `json:"moved"`
}

// Validate validates this move items o k body
func (o *MoveItemsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMoved(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveItemsOKBody) validateMoved(formats strfmt.Registry) error {
	if swag.IsZero(o.Moved) { // not required
		return nil
	}

	for i := 0; i < len(o.Moved); i++ {
		if swag.IsZero(o.Moved[i]) { // not required
			continue
		}

		if o.Moved[i] != nil {
			if err := o.Moved[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this move items o k body based on the context it is used
func (o *MoveItemsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMoved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveItemsOKBody) contextValidateMoved(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Moved); i++ {

		if o.Moved[i] != nil {
			if err := o.Moved[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveItemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveItemsOKBody) UnmarshalBinary(b []byte) error {
	var res MoveItemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
