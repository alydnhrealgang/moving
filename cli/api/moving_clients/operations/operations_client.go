// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAsset(params *DeleteAssetParams, opts ...ClientOption) (*DeleteAssetOK, error)

	DownloadAsset(params *DownloadAssetParams, opts ...ClientOption) (*DownloadAssetOK, error)

	GetAsset(params *GetAssetParams, opts ...ClientOption) (*GetAssetOK, error)

	GetItemByCode(params *GetItemByCodeParams, opts ...ClientOption) (*GetItemByCodeOK, error)

	MoveItems(params *MoveItemsParams, opts ...ClientOption) (*MoveItemsOK, error)

	QueryItems(params *QueryItemsParams, opts ...ClientOption) (*QueryItemsOK, error)

	SaveItem(params *SaveItemParams, opts ...ClientOption) (*SaveItemOK, error)

	SuggestTexts(params *SuggestTextsParams, opts ...ClientOption) (*SuggestTextsOK, error)

	UploadAsset(params *UploadAssetParams, opts ...ClientOption) (*UploadAssetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAsset deletes an asset
*/
func (a *Client) DeleteAsset(params *DeleteAssetParams, opts ...ClientOption) (*DeleteAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAsset",
		Method:             "DELETE",
		PathPattern:        "/assets/{path}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadAsset downloads an asset
*/
func (a *Client) DownloadAsset(params *DownloadAssetParams, opts ...ClientOption) (*DownloadAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadAsset",
		Method:             "GET",
		PathPattern:        "/assets/download/{path}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream", "image/gif", "image/jpeg", "image/png", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAsset retrieves the metadata of an asset
*/
func (a *Client) GetAsset(params *GetAssetParams, opts ...ClientOption) (*GetAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAsset",
		Method:             "GET",
		PathPattern:        "/assets/{path}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetItemByCode gets a item or its children
*/
func (a *Client) GetItemByCode(params *GetItemByCodeParams, opts ...ClientOption) (*GetItemByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemByCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetItemByCode",
		Method:             "GET",
		PathPattern:        "/item/{code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetItemByCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetItemByCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetItemByCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MoveItems moves items to another box
*/
func (a *Client) MoveItems(params *MoveItemsParams, opts ...ClientOption) (*MoveItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MoveItems",
		Method:             "POST",
		PathPattern:        "/items/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MoveItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryItems queries items
*/
func (a *Client) QueryItems(params *QueryItemsParams, opts ...ClientOption) (*QueryItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryItems",
		Method:             "GET",
		PathPattern:        "/items/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveItem saves a item
*/
func (a *Client) SaveItem(params *SaveItemParams, opts ...ClientOption) (*SaveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SaveItem",
		Method:             "POST",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SaveItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SuggestTexts retrieves a list of texts by given name and text
*/
func (a *Client) SuggestTexts(params *SuggestTextsParams, opts ...ClientOption) (*SuggestTextsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestTextsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuggestTexts",
		Method:             "GET",
		PathPattern:        "/suggest/{name}/{text}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuggestTextsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestTextsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuggestTexts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadAsset uploads an asset
*/
func (a *Client) UploadAsset(params *UploadAssetParams, opts ...ClientOption) (*UploadAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadAsset",
		Method:             "POST",
		PathPattern:        "/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UploadAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
