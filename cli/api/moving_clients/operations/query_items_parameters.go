// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryItemsParams creates a new QueryItemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryItemsParams() *QueryItemsParams {
	return &QueryItemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryItemsParamsWithTimeout creates a new QueryItemsParams object
// with the ability to set a timeout on a request.
func NewQueryItemsParamsWithTimeout(timeout time.Duration) *QueryItemsParams {
	return &QueryItemsParams{
		timeout: timeout,
	}
}

// NewQueryItemsParamsWithContext creates a new QueryItemsParams object
// with the ability to set a context for a request.
func NewQueryItemsParamsWithContext(ctx context.Context) *QueryItemsParams {
	return &QueryItemsParams{
		Context: ctx,
	}
}

// NewQueryItemsParamsWithHTTPClient creates a new QueryItemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryItemsParamsWithHTTPClient(client *http.Client) *QueryItemsParams {
	return &QueryItemsParams{
		HTTPClient: client,
	}
}

/*
QueryItemsParams contains all the parameters to send to the API endpoint

	for the query items operation.

	Typically these are written to a http.Request.
*/
type QueryItemsParams struct {

	// FetchSize.
	FetchSize int64

	// Keyword.
	Keyword string

	// StartIndex.
	StartIndex int64

	// TagName.
	TagName *string

	// Type.
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryItemsParams) WithDefaults() *QueryItemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryItemsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query items params
func (o *QueryItemsParams) WithTimeout(timeout time.Duration) *QueryItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query items params
func (o *QueryItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query items params
func (o *QueryItemsParams) WithContext(ctx context.Context) *QueryItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query items params
func (o *QueryItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query items params
func (o *QueryItemsParams) WithHTTPClient(client *http.Client) *QueryItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query items params
func (o *QueryItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFetchSize adds the fetchSize to the query items params
func (o *QueryItemsParams) WithFetchSize(fetchSize int64) *QueryItemsParams {
	o.SetFetchSize(fetchSize)
	return o
}

// SetFetchSize adds the fetchSize to the query items params
func (o *QueryItemsParams) SetFetchSize(fetchSize int64) {
	o.FetchSize = fetchSize
}

// WithKeyword adds the keyword to the query items params
func (o *QueryItemsParams) WithKeyword(keyword string) *QueryItemsParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the query items params
func (o *QueryItemsParams) SetKeyword(keyword string) {
	o.Keyword = keyword
}

// WithStartIndex adds the startIndex to the query items params
func (o *QueryItemsParams) WithStartIndex(startIndex int64) *QueryItemsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the query items params
func (o *QueryItemsParams) SetStartIndex(startIndex int64) {
	o.StartIndex = startIndex
}

// WithTagName adds the tagName to the query items params
func (o *QueryItemsParams) WithTagName(tagName *string) *QueryItemsParams {
	o.SetTagName(tagName)
	return o
}

// SetTagName adds the tagName to the query items params
func (o *QueryItemsParams) SetTagName(tagName *string) {
	o.TagName = tagName
}

// WithType adds the typeVar to the query items params
func (o *QueryItemsParams) WithType(typeVar string) *QueryItemsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the query items params
func (o *QueryItemsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *QueryItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param fetchSize
	qrFetchSize := o.FetchSize
	qFetchSize := swag.FormatInt64(qrFetchSize)
	if qFetchSize != "" {

		if err := r.SetQueryParam("fetchSize", qFetchSize); err != nil {
			return err
		}
	}

	// query param keyword
	qrKeyword := o.Keyword
	qKeyword := qrKeyword
	if qKeyword != "" {

		if err := r.SetQueryParam("keyword", qKeyword); err != nil {
			return err
		}
	}

	// query param startIndex
	qrStartIndex := o.StartIndex
	qStartIndex := swag.FormatInt64(qrStartIndex)
	if qStartIndex != "" {

		if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
			return err
		}
	}

	if o.TagName != nil {

		// query param tagName
		var qrTagName string

		if o.TagName != nil {
			qrTagName = *o.TagName
		}
		qTagName := qrTagName
		if qTagName != "" {

			if err := r.SetQueryParam("tagName", qTagName); err != nil {
				return err
			}
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
