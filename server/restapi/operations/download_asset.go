// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadAssetHandlerFunc turns a function with the right signature into a download asset handler
type DownloadAssetHandlerFunc func(DownloadAssetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadAssetHandlerFunc) Handle(params DownloadAssetParams) middleware.Responder {
	return fn(params)
}

// DownloadAssetHandler interface for that can handle valid download asset params
type DownloadAssetHandler interface {
	Handle(DownloadAssetParams) middleware.Responder
}

// NewDownloadAsset creates a new http.Handler for the download asset operation
func NewDownloadAsset(ctx *middleware.Context, handler DownloadAssetHandler) *DownloadAsset {
	return &DownloadAsset{Context: ctx, Handler: handler}
}

/*
	DownloadAsset swagger:route GET /assets/download/{path}/{name} downloadAsset

Download an asset
*/
type DownloadAsset struct {
	Context *middleware.Context
	Handler DownloadAssetHandler
}

func (o *DownloadAsset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDownloadAssetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
