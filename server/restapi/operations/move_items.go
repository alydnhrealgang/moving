// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/alydnhrealgang/moving/server/models"
)

// MoveItemsHandlerFunc turns a function with the right signature into a move items handler
type MoveItemsHandlerFunc func(MoveItemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MoveItemsHandlerFunc) Handle(params MoveItemsParams) middleware.Responder {
	return fn(params)
}

// MoveItemsHandler interface for that can handle valid move items params
type MoveItemsHandler interface {
	Handle(MoveItemsParams) middleware.Responder
}

// NewMoveItems creates a new http.Handler for the move items operation
func NewMoveItems(ctx *middleware.Context, handler MoveItemsHandler) *MoveItems {
	return &MoveItems{Context: ctx, Handler: handler}
}

/*
	MoveItems swagger:route POST /items/move moveItems

Move items to another box
*/
type MoveItems struct {
	Context *middleware.Context
	Handler MoveItemsHandler
}

func (o *MoveItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMoveItemsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// MoveItemsBody move items body
//
// swagger:model MoveItemsBody
type MoveItemsBody struct {

	// codes
	Codes []string `json:"codes"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this move items body
func (o *MoveItemsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move items body based on context it is used
func (o *MoveItemsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveItemsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveItemsBody) UnmarshalBinary(b []byte) error {
	var res MoveItemsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// MoveItemsOKBody move items o k body
//
// swagger:model MoveItemsOKBody
type MoveItemsOKBody struct {

	// codes not found
	CodesNotFound []string `json:"codesNotFound"`

	// moved
	Moved []*models.ItemData `json:"moved"`
}

// Validate validates this move items o k body
func (o *MoveItemsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMoved(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveItemsOKBody) validateMoved(formats strfmt.Registry) error {
	if swag.IsZero(o.Moved) { // not required
		return nil
	}

	for i := 0; i < len(o.Moved); i++ {
		if swag.IsZero(o.Moved[i]) { // not required
			continue
		}

		if o.Moved[i] != nil {
			if err := o.Moved[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this move items o k body based on the context it is used
func (o *MoveItemsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMoved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveItemsOKBody) contextValidateMoved(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Moved); i++ {

		if o.Moved[i] != nil {
			if err := o.Moved[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveItemsOK" + "." + "moved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveItemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveItemsOKBody) UnmarshalBinary(b []byte) error {
	var res MoveItemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
