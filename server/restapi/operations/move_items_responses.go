// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// MoveItemsOKCode is the HTTP code returned for type MoveItemsOK
const MoveItemsOKCode int = 200

/*
MoveItemsOK OK

swagger:response moveItemsOK
*/
type MoveItemsOK struct {

	/*
	  In: Body
	*/
	Payload *MoveItemsOKBody `json:"body,omitempty"`
}

// NewMoveItemsOK creates MoveItemsOK with default headers values
func NewMoveItemsOK() *MoveItemsOK {

	return &MoveItemsOK{}
}

// WithPayload adds the payload to the move items o k response
func (o *MoveItemsOK) WithPayload(payload *MoveItemsOKBody) *MoveItemsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move items o k response
func (o *MoveItemsOK) SetPayload(payload *MoveItemsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveItemsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MoveItemsBadRequestCode is the HTTP code returned for type MoveItemsBadRequest
const MoveItemsBadRequestCode int = 400

/*
MoveItemsBadRequest BadRequest

swagger:response moveItemsBadRequest
*/
type MoveItemsBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewMoveItemsBadRequest creates MoveItemsBadRequest with default headers values
func NewMoveItemsBadRequest() *MoveItemsBadRequest {

	return &MoveItemsBadRequest{}
}

// WithPayload adds the payload to the move items bad request response
func (o *MoveItemsBadRequest) WithPayload(payload string) *MoveItemsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the move items bad request response
func (o *MoveItemsBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MoveItemsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
