// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewQueryItemsParams creates a new QueryItemsParams object
//
// There are no default values defined in the spec.
func NewQueryItemsParams() QueryItemsParams {

	return QueryItemsParams{}
}

// QueryItemsParams contains all the bound params for the query items operation
// typically these are obtained from a http.Request
//
// swagger:parameters QueryItems
type QueryItemsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	FetchSize int64
	/*
	  Required: true
	  In: query
	*/
	Keyword string
	/*
	  Required: true
	  In: query
	*/
	StartIndex int64
	/*
	  In: query
	*/
	TagName *string
	/*
	  Required: true
	  In: query
	*/
	Type string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewQueryItemsParams() beforehand.
func (o *QueryItemsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFetchSize, qhkFetchSize, _ := qs.GetOK("fetchSize")
	if err := o.bindFetchSize(qFetchSize, qhkFetchSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qKeyword, qhkKeyword, _ := qs.GetOK("keyword")
	if err := o.bindKeyword(qKeyword, qhkKeyword, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartIndex, qhkStartIndex, _ := qs.GetOK("startIndex")
	if err := o.bindStartIndex(qStartIndex, qhkStartIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	qTagName, qhkTagName, _ := qs.GetOK("tagName")
	if err := o.bindTagName(qTagName, qhkTagName, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFetchSize binds and validates parameter FetchSize from query.
func (o *QueryItemsParams) bindFetchSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("fetchSize", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("fetchSize", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("fetchSize", "query", "int64", raw)
	}
	o.FetchSize = value

	return nil
}

// bindKeyword binds and validates parameter Keyword from query.
func (o *QueryItemsParams) bindKeyword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("keyword", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("keyword", "query", raw); err != nil {
		return err
	}
	o.Keyword = raw

	return nil
}

// bindStartIndex binds and validates parameter StartIndex from query.
func (o *QueryItemsParams) bindStartIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("startIndex", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("startIndex", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("startIndex", "query", "int64", raw)
	}
	o.StartIndex = value

	return nil
}

// bindTagName binds and validates parameter TagName from query.
func (o *QueryItemsParams) bindTagName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.TagName = &raw

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *QueryItemsParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("type", "query", raw); err != nil {
		return err
	}
	o.Type = raw

	return nil
}
