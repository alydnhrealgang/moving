// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SaveItemOKCode is the HTTP code returned for type SaveItemOK
const SaveItemOKCode int = 200

/*
SaveItemOK OK

swagger:response saveItemOK
*/
type SaveItemOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSaveItemOK creates SaveItemOK with default headers values
func NewSaveItemOK() *SaveItemOK {

	return &SaveItemOK{}
}

// WithPayload adds the payload to the save item o k response
func (o *SaveItemOK) WithPayload(payload string) *SaveItemOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save item o k response
func (o *SaveItemOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveItemOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SaveItemBadRequestCode is the HTTP code returned for type SaveItemBadRequest
const SaveItemBadRequestCode int = 400

/*
SaveItemBadRequest BadRequest

swagger:response saveItemBadRequest
*/
type SaveItemBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSaveItemBadRequest creates SaveItemBadRequest with default headers values
func NewSaveItemBadRequest() *SaveItemBadRequest {

	return &SaveItemBadRequest{}
}

// WithPayload adds the payload to the save item bad request response
func (o *SaveItemBadRequest) WithPayload(payload string) *SaveItemBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save item bad request response
func (o *SaveItemBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveItemBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
