// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadAssetHandlerFunc turns a function with the right signature into a upload asset handler
type UploadAssetHandlerFunc func(UploadAssetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadAssetHandlerFunc) Handle(params UploadAssetParams) middleware.Responder {
	return fn(params)
}

// UploadAssetHandler interface for that can handle valid upload asset params
type UploadAssetHandler interface {
	Handle(UploadAssetParams) middleware.Responder
}

// NewUploadAsset creates a new http.Handler for the upload asset operation
func NewUploadAsset(ctx *middleware.Context, handler UploadAssetHandler) *UploadAsset {
	return &UploadAsset{Context: ctx, Handler: handler}
}

/*
	UploadAsset swagger:route POST /assets uploadAsset

Upload an asset
*/
type UploadAsset struct {
	Context *middleware.Context
	Handler UploadAssetHandler
}

func (o *UploadAsset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadAssetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
