// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UploadAssetMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadAssetMaxParseMemory int64 = 32 << 20

// NewUploadAssetParams creates a new UploadAssetParams object
//
// There are no default values defined in the spec.
func NewUploadAssetParams() UploadAssetParams {

	return UploadAssetParams{}
}

// UploadAssetParams contains all the bound params for the upload asset operation
// typically these are obtained from a http.Request
//
// swagger:parameters UploadAsset
type UploadAssetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: formData
	*/
	ContentType string
	/*
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*
	  Required: true
	  In: formData
	*/
	Name string
	/*
	  Required: true
	  In: formData
	*/
	Path string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadAssetParams() beforehand.
func (o *UploadAssetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadAssetMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdContentType, fdhkContentType, _ := fds.GetOK("contentType")
	if err := o.bindContentType(fdContentType, fdhkContentType, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPath, fdhkPath, _ := fds.GetOK("path")
	if err := o.bindPath(fdPath, fdhkPath, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContentType binds and validates parameter ContentType from formData.
func (o *UploadAssetParams) bindContentType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("contentType", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("contentType", "formData", raw); err != nil {
		return err
	}
	o.ContentType = raw

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadAssetParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *UploadAssetParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}
	o.Name = raw

	return nil
}

// bindPath binds and validates parameter Path from formData.
func (o *UploadAssetParams) bindPath(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("path", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("path", "formData", raw); err != nil {
		return err
	}
	o.Path = raw

	return nil
}
